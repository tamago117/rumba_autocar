<?xml version="1.0"?>
<launch>
    <arg name="nav_mode" default="slam"/>
    <arg name="gazebo" default="false"/>
    <arg name="world" default="turtlebot3_world.world"/>
    <!--<arg name="world" default="turtlebot3_house.world"/>-->
    <arg name="move_base" default="false"/>
    <arg name="mapFile" default = "$(find rumba_autocar)/resources/myRoom/map.yaml"/>
    <!-- Robot description -->
    <include file="$(find rumba_autocar)/launch/include/model_show.launch" >
        <arg name="include" value="true"/>
    </include>

    <group unless="$(arg gazebo)">
        <include file="$(find rumba_autocar)/launch/include/sensor.launch" >
            <arg name="use_imu" value="false"/>
            <arg name="lidar" default="hokuyo"/>
        </include>
    </group>
    <group if="$(arg gazebo)">
        <arg name="ini_x_pos" default= "0.0"/>
        <arg name="ini_y_pos" default= "0.0"/>
        <arg name="ini_z_pos" default= "0.0"/>
        <arg name="ini_yaw"   default= "0.0"/>

        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find rumba_autocar)/worlds/$(arg world)"/>
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="false"/>
            <arg name="debug" value="false"/>
        </include>
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model roomba -x $(arg ini_x_pos) -y $(arg ini_y_pos) -z $(arg ini_z_pos) -Y $(arg ini_yaw)" />

        <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter">
            <rosparam command="load" file="$(find rumba_autocar)/config/laser_filter.yaml"/>
            <remap from="scan"  to="/lidar_link/scan"/>
        </node>
    </group>

    <!--odometry-->
    <!--<node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" output="screen">
        <rosparam command="load" file="$(find rumba_autocar)/config/ekf_localization/model1.yaml" />
        <remap from="/odometry/filtered" to="fusion/odom" />
        <remap from="odom0" to="odom" />
        <remap from="imu0"  to="/imu/data" />
    </node>-->

    <group if="$(eval nav_mode == 'mapping')">
        <!--mapping-->
        <!--gmapping-->
        <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" clear_params="true">
            <rosparam command="load" file="$(find rumba_autocar)/config/gmapping.yaml" />
            <remap from="scan"  to="scan_filtered"/>
        </node>
    </group>

    <group if="$(eval nav_mode == 'slam')">
        <!-- amcl -->
        <node pkg="map_server" type="map_server" name="map_server" args="$(arg mapFile)">
            <param name="frame_id" value="map"/>
        </node>
        <node pkg="amcl" type="amcl" name="amcl" clear_params="true">
            <rosparam command="load" file="$(find rumba_autocar)/config/amcl.yaml" />
            <remap from="scan"  to="scan_filtered"/>
        </node>
    </group>

    <!-- move_base -->
    <group if="$(arg move_base)">
        <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
            <rosparam file="$(find rumba_autocar)/config/move_base/local_costmap_params_old.yaml" command="load" />
            <rosparam file="$(find rumba_autocar)/config/move_base/global_costmap_params_old.yaml" command="load" />
            <rosparam file="$(find rumba_autocar)/config/move_base/base_local_planner_params.yaml" command="load" />

            <param name="global_costmap/global_frame" value="map" />
            <param name="global_costmap/robot_base_frame" value="base_footprint" />
            <param name="local_costmap/laser_scan_sensor/sensor_frame" value="lidar_link" />
            <param name="local_costmap/laser_scan_sensor/topic" value="scan_filter" />
            <param name="local_costmap/global_frame" value="odom" />
            <param name="local_costmap/robot_base_frame" value="base_footprint" />
        </node>
    </group>



</launch>